These are some proposed additions/changes the code on the Arduino.
The Python wrapper needs these implemented as well.

We've made the buffer itself a global array of floats to keep track of memory
usage better. Currently it's a 2D array, with functions to read and write to it
in a linear fashion (to avoid dynamic allocation).

We need to add these functions to intelligently check if the user selected
sample count isn't going to crash the Arduino:
  o ReportBufferSize()
      Sends Buffer Dimensions formatted like: "4,3000" - 4ch, 3000 samples/ch
      (total 12000 samples) This is so when the user proposes a sample count
      (samplerate*time) the host can reject the input saving the arduino from
      crashing. The dimensions are global variables, accessible by all functions

We need to separate the readout and acquisition functions. This should simplify
further additions. The readout function can be placed inside the ACQ/RAR funcs
  Xo ReadOut(Buffer,len,ch0,ch1,ch2,ch3)
      Reads out the buffer. Example: ReadOut(Buffer,1,0,1,0) outputs two comma
      separated lists of length "len": Ch1's voltages and Ch2's voltages.


Changes to implement to existing functions:

  Xo RAR1/RAR4 and ACQ1/ACQ4 should be combined. Add a parameter for 1 or
  4 channels (not configurable over Serial comms)
  Xo RAR1/RAR4 and ACQ1/ACQ4 need to be switched over to using the global buffer.
  Xo Place readout funcs inside RAR/ACQ functions

Things to be finished:
  o ACQ function
